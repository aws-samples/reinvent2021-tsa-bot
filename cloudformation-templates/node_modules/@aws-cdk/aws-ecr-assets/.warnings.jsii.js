function _aws_cdk_aws_ecr_assets_TarballImageAssetProps(p) {
}
function _aws_cdk_aws_ecr_assets_DockerImageAssetInvalidationOptions(p) {
}
function _aws_cdk_aws_ecr_assets_DockerImageAssetProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    if (!visitedObjects.has(p.invalidation))
        _aws_cdk_aws_ecr_assets_DockerImageAssetInvalidationOptions(p.invalidation);
    if ("repositoryName" in p)
        print("@aws-cdk/aws-ecr-assets.DockerImageAssetOptions#repositoryName", "to control the location of docker image assets, please override\n`Stack.addDockerImageAsset`. this feature will be removed in future\nreleases.");
    if ("follow" in p)
        print("@aws-cdk/assets.CopyOptions#follow", "use `followSymlinks` instead");
    visitedObjects.delete(p);
}
function _aws_cdk_aws_ecr_assets_DockerImageAssetOptions(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    if (!visitedObjects.has(p.invalidation))
        _aws_cdk_aws_ecr_assets_DockerImageAssetInvalidationOptions(p.invalidation);
    if ("repositoryName" in p)
        print("@aws-cdk/aws-ecr-assets.DockerImageAssetOptions#repositoryName", "to control the location of docker image assets, please override\n`Stack.addDockerImageAsset`. this feature will be removed in future\nreleases.");
    if ("follow" in p)
        print("@aws-cdk/assets.CopyOptions#follow", "use `followSymlinks` instead");
    visitedObjects.delete(p);
}
function _aws_cdk_aws_ecr_assets_TarballImageAsset(p) {
}
function _aws_cdk_aws_ecr_assets_DockerImageAsset(p) {
}
function print(name, deprecationMessage) {
    const deprecated = process.env.JSII_DEPRECATED;
    const deprecationMode = ["warn", "fail", "quiet"].includes(deprecated) ? deprecated : "warn";
    const message = `${name} is deprecated.\n  ${deprecationMessage}\n  This API will be removed in the next major release.`;
    switch (deprecationMode) {
        case "fail":
            throw new DeprecationError(message);
        case "warn":
            console.warn("[WARNING]", message);
            break;
    }
}
const visitedObjects = new Set();
class DeprecationError extends Error {
}
module.exports = { print, _aws_cdk_aws_ecr_assets_TarballImageAssetProps, _aws_cdk_aws_ecr_assets_DockerImageAssetInvalidationOptions, _aws_cdk_aws_ecr_assets_DockerImageAssetProps, _aws_cdk_aws_ecr_assets_DockerImageAssetOptions, _aws_cdk_aws_ecr_assets_TarballImageAsset, _aws_cdk_aws_ecr_assets_DockerImageAsset };
module.exports.DeprecationError = DeprecationError;
